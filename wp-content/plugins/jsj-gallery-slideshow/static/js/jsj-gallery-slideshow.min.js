(function($) {
    "use strict";
    var version = "2.1.5";
    $.fn.cycle = function(options) {
        var o;
        if (this.length === 0 && !$.isReady) {
            o = {
                s: this.selector,
                c: this.context
            };
            $.fn.cycle.log("requeuing slideshow (dom not ready)");
            $(function() {
                $(o.s, o.c).cycle(options);
            });
            return this;
        }
        return this.each(function() {
            var data, opts, shortName, val;
            var container = $(this);
            var log = $.fn.cycle.log;
            if (container.data("cycle.opts")) return;
            if (container.data("cycle-log") === false || options && options.log === false || opts && opts.log === false) {
                log = $.noop;
            }
            log("--c2 init--");
            data = container.data();
            for (var p in data) {
                if (data.hasOwnProperty(p) && /^cycle[A-Z]+/.test(p)) {
                    val = data[p];
                    shortName = p.match(/^cycle(.*)/)[1].replace(/^[A-Z]/, lowerCase);
                    log(shortName + ":", val, "(" + typeof val + ")");
                    data[shortName] = val;
                }
            }
            opts = $.extend({}, $.fn.cycle.defaults, data, options || {});
            opts.timeoutId = 0;
            opts.paused = opts.paused || false;
            opts.container = container;
            opts._maxZ = opts.maxZ;
            opts.API = $.extend({
                _container: container
            }, $.fn.cycle.API);
            opts.API.log = log;
            opts.API.trigger = function(eventName, args) {
                opts.container.trigger(eventName, args);
                return opts.API;
            };
            container.data("cycle.opts", opts);
            container.data("cycle.API", opts.API);
            opts.API.trigger("cycle-bootstrap", [ opts, opts.API ]);
            opts.API.addInitialSlides();
            opts.API.preInitSlideshow();
            if (opts.slides.length) opts.API.initSlideshow();
        });
    };
    $.fn.cycle.API = {
        opts: function() {
            return this._container.data("cycle.opts");
        },
        addInitialSlides: function() {
            var opts = this.opts();
            var slides = opts.slides;
            opts.slideCount = 0;
            opts.slides = $();
            slides = slides.jquery ? slides : opts.container.find(slides);
            if (opts.random) {
                slides.sort(function() {
                    return Math.random() - .5;
                });
            }
            opts.API.add(slides);
        },
        preInitSlideshow: function() {
            var opts = this.opts();
            opts.API.trigger("cycle-pre-initialize", [ opts ]);
            var tx = $.fn.cycle.transitions[opts.fx];
            if (tx && $.isFunction(tx.preInit)) tx.preInit(opts);
            opts._preInitialized = true;
        },
        postInitSlideshow: function() {
            var opts = this.opts();
            opts.API.trigger("cycle-post-initialize", [ opts ]);
            var tx = $.fn.cycle.transitions[opts.fx];
            if (tx && $.isFunction(tx.postInit)) tx.postInit(opts);
        },
        initSlideshow: function() {
            var opts = this.opts();
            var pauseObj = opts.container;
            var slideOpts;
            opts.API.calcFirstSlide();
            if (opts.container.css("position") == "static") opts.container.css("position", "relative");
            $(opts.slides[opts.currSlide]).css({
                opacity: 1,
                display: "block",
                visibility: "visible"
            });
            opts.API.stackSlides(opts.slides[opts.currSlide], opts.slides[opts.nextSlide], !opts.reverse);
            if (opts.pauseOnHover) {
                if (opts.pauseOnHover !== true) pauseObj = $(opts.pauseOnHover);
                pauseObj.hover(function() {
                    opts.API.pause(true);
                }, function() {
                    opts.API.resume(true);
                });
            }
            if (opts.timeout) {
                slideOpts = opts.API.getSlideOpts(opts.currSlide);
                opts.API.queueTransition(slideOpts, slideOpts.timeout + opts.delay);
            }
            opts._initialized = true;
            opts.API.updateView(true);
            opts.API.trigger("cycle-initialized", [ opts ]);
            opts.API.postInitSlideshow();
        },
        pause: function(hover) {
            var opts = this.opts(), slideOpts = opts.API.getSlideOpts(), alreadyPaused = opts.hoverPaused || opts.paused;
            if (hover) opts.hoverPaused = true; else opts.paused = true;
            if (!alreadyPaused) {
                opts.container.addClass("cycle-paused");
                opts.API.trigger("cycle-paused", [ opts ]).log("cycle-paused");
                if (slideOpts.timeout) {
                    clearTimeout(opts.timeoutId);
                    opts.timeoutId = 0;
                    opts._remainingTimeout -= $.now() - opts._lastQueue;
                    if (opts._remainingTimeout < 0 || isNaN(opts._remainingTimeout)) opts._remainingTimeout = undefined;
                }
            }
        },
        resume: function(hover) {
            var opts = this.opts(), alreadyResumed = !opts.hoverPaused && !opts.paused, remaining;
            if (hover) opts.hoverPaused = false; else opts.paused = false;
            if (!alreadyResumed) {
                opts.container.removeClass("cycle-paused");
                if (opts.slides.filter(":animated").length === 0) opts.API.queueTransition(opts.API.getSlideOpts(), opts._remainingTimeout);
                opts.API.trigger("cycle-resumed", [ opts, opts._remainingTimeout ]).log("cycle-resumed");
            }
        },
        add: function(slides, prepend) {
            var opts = this.opts();
            var oldSlideCount = opts.slideCount;
            var startSlideshow = false;
            var len;
            if ($.type(slides) == "string") slides = $.trim(slides);
            $(slides).each(function(i) {
                var slideOpts;
                var slide = $(this);
                if (prepend) opts.container.prepend(slide); else opts.container.append(slide);
                opts.slideCount++;
                slideOpts = opts.API.buildSlideOpts(slide);
                if (prepend) opts.slides = $(slide).add(opts.slides); else opts.slides = opts.slides.add(slide);
                opts.API.initSlide(slideOpts, slide, --opts._maxZ);
                slide.data("cycle.opts", slideOpts);
                opts.API.trigger("cycle-slide-added", [ opts, slideOpts, slide ]);
            });
            opts.API.updateView(true);
            startSlideshow = opts._preInitialized && (oldSlideCount < 2 && opts.slideCount >= 1);
            if (startSlideshow) {
                if (!opts._initialized) opts.API.initSlideshow(); else if (opts.timeout) {
                    len = opts.slides.length;
                    opts.nextSlide = opts.reverse ? len - 1 : 1;
                    if (!opts.timeoutId) {
                        opts.API.queueTransition(opts);
                    }
                }
            }
        },
        calcFirstSlide: function() {
            var opts = this.opts();
            var firstSlideIndex;
            firstSlideIndex = parseInt(opts.startingSlide || 0, 10);
            if (firstSlideIndex >= opts.slides.length || firstSlideIndex < 0) firstSlideIndex = 0;
            opts.currSlide = firstSlideIndex;
            if (opts.reverse) {
                opts.nextSlide = firstSlideIndex - 1;
                if (opts.nextSlide < 0) opts.nextSlide = opts.slides.length - 1;
            } else {
                opts.nextSlide = firstSlideIndex + 1;
                if (opts.nextSlide == opts.slides.length) opts.nextSlide = 0;
            }
        },
        calcNextSlide: function() {
            var opts = this.opts();
            var roll;
            if (opts.reverse) {
                roll = opts.nextSlide - 1 < 0;
                opts.nextSlide = roll ? opts.slideCount - 1 : opts.nextSlide - 1;
                opts.currSlide = roll ? 0 : opts.nextSlide + 1;
            } else {
                roll = opts.nextSlide + 1 == opts.slides.length;
                opts.nextSlide = roll ? 0 : opts.nextSlide + 1;
                opts.currSlide = roll ? opts.slides.length - 1 : opts.nextSlide - 1;
            }
        },
        calcTx: function(slideOpts, manual) {
            var opts = slideOpts;
            var tx;
            if (opts._tempFx) tx = $.fn.cycle.transitions[opts._tempFx]; else if (manual && opts.manualFx) tx = $.fn.cycle.transitions[opts.manualFx];
            if (!tx) tx = $.fn.cycle.transitions[opts.fx];
            opts._tempFx = null;
            this.opts()._tempFx = null;
            if (!tx) {
                tx = $.fn.cycle.transitions.fade;
                opts.API.log('Transition "' + opts.fx + '" not found.  Using fade.');
            }
            return tx;
        },
        prepareTx: function(manual, fwd) {
            var opts = this.opts();
            var after, curr, next, slideOpts, tx;
            if (opts.slideCount < 2) {
                opts.timeoutId = 0;
                return;
            }
            if (manual && (!opts.busy || opts.manualTrump)) {
                opts.API.stopTransition();
                opts.busy = false;
                clearTimeout(opts.timeoutId);
                opts.timeoutId = 0;
            }
            if (opts.busy) return;
            if (opts.timeoutId === 0 && !manual) return;
            curr = opts.slides[opts.currSlide];
            next = opts.slides[opts.nextSlide];
            slideOpts = opts.API.getSlideOpts(opts.nextSlide);
            tx = opts.API.calcTx(slideOpts, manual);
            opts._tx = tx;
            if (manual && slideOpts.manualSpeed !== undefined) slideOpts.speed = slideOpts.manualSpeed;
            if (opts.nextSlide != opts.currSlide && (manual || !opts.paused && !opts.hoverPaused && opts.timeout)) {
                opts.API.trigger("cycle-before", [ slideOpts, curr, next, fwd ]);
                if (tx.before) tx.before(slideOpts, curr, next, fwd);
                after = function() {
                    opts.busy = false;
                    if (!opts.container.data("cycle.opts")) return;
                    if (tx.after) tx.after(slideOpts, curr, next, fwd);
                    opts.API.trigger("cycle-after", [ slideOpts, curr, next, fwd ]);
                    opts.API.queueTransition(slideOpts);
                    opts.API.updateView(true);
                };
                opts.busy = true;
                if (tx.transition) tx.transition(slideOpts, curr, next, fwd, after); else opts.API.doTransition(slideOpts, curr, next, fwd, after);
                opts.API.calcNextSlide();
                opts.API.updateView();
            } else {
                opts.API.queueTransition(slideOpts);
            }
        },
        doTransition: function(slideOpts, currEl, nextEl, fwd, callback) {
            var opts = slideOpts;
            var curr = $(currEl), next = $(nextEl);
            var fn = function() {
                next.animate(opts.animIn || {
                    opacity: 1
                }, opts.speed, opts.easeIn || opts.easing, callback);
            };
            next.css(opts.cssBefore || {});
            curr.animate(opts.animOut || {}, opts.speed, opts.easeOut || opts.easing, function() {
                curr.css(opts.cssAfter || {});
                if (!opts.sync) {
                    fn();
                }
            });
            if (opts.sync) {
                fn();
            }
        },
        queueTransition: function(slideOpts, specificTimeout) {
            var opts = this.opts();
            var timeout = specificTimeout !== undefined ? specificTimeout : slideOpts.timeout;
            if (opts.nextSlide === 0 && --opts.loop === 0) {
                opts.API.log("terminating; loop=0");
                opts.timeout = 0;
                if (timeout) {
                    setTimeout(function() {
                        opts.API.trigger("cycle-finished", [ opts ]);
                    }, timeout);
                } else {
                    opts.API.trigger("cycle-finished", [ opts ]);
                }
                opts.nextSlide = opts.currSlide;
                return;
            }
            if (opts.continueAuto !== undefined) {
                if (opts.continueAuto === false || $.isFunction(opts.continueAuto) && opts.continueAuto() === false) {
                    opts.API.log("terminating automatic transitions");
                    opts.timeout = 0;
                    if (opts.timeoutId) clearTimeout(opts.timeoutId);
                    return;
                }
            }
            if (timeout) {
                opts._lastQueue = $.now();
                if (specificTimeout === undefined) opts._remainingTimeout = slideOpts.timeout;
                if (!opts.paused && !opts.hoverPaused) {
                    opts.timeoutId = setTimeout(function() {
                        opts.API.prepareTx(false, !opts.reverse);
                    }, timeout);
                }
            }
        },
        stopTransition: function() {
            var opts = this.opts();
            if (opts.slides.filter(":animated").length) {
                opts.slides.stop(false, true);
                opts.API.trigger("cycle-transition-stopped", [ opts ]);
            }
            if (opts._tx && opts._tx.stopTransition) opts._tx.stopTransition(opts);
        },
        advanceSlide: function(val) {
            var opts = this.opts();
            clearTimeout(opts.timeoutId);
            opts.timeoutId = 0;
            opts.nextSlide = opts.currSlide + val;
            if (opts.nextSlide < 0) opts.nextSlide = opts.slides.length - 1; else if (opts.nextSlide >= opts.slides.length) opts.nextSlide = 0;
            opts.API.prepareTx(true, val >= 0);
            return false;
        },
        buildSlideOpts: function(slide) {
            var opts = this.opts();
            var val, shortName;
            var slideOpts = slide.data() || {};
            for (var p in slideOpts) {
                if (slideOpts.hasOwnProperty(p) && /^cycle[A-Z]+/.test(p)) {
                    val = slideOpts[p];
                    shortName = p.match(/^cycle(.*)/)[1].replace(/^[A-Z]/, lowerCase);
                    opts.API.log("[" + (opts.slideCount - 1) + "]", shortName + ":", val, "(" + typeof val + ")");
                    slideOpts[shortName] = val;
                }
            }
            slideOpts = $.extend({}, $.fn.cycle.defaults, opts, slideOpts);
            slideOpts.slideNum = opts.slideCount;
            try {
                delete slideOpts.API;
                delete slideOpts.slideCount;
                delete slideOpts.currSlide;
                delete slideOpts.nextSlide;
                delete slideOpts.slides;
            } catch (e) {}
            return slideOpts;
        },
        getSlideOpts: function(index) {
            var opts = this.opts();
            if (index === undefined) index = opts.currSlide;
            var slide = opts.slides[index];
            var slideOpts = $(slide).data("cycle.opts");
            return $.extend({}, opts, slideOpts);
        },
        initSlide: function(slideOpts, slide, suggestedZindex) {
            var opts = this.opts();
            slide.css(slideOpts.slideCss || {});
            if (suggestedZindex > 0) slide.css("zIndex", suggestedZindex);
            if (isNaN(slideOpts.speed)) slideOpts.speed = $.fx.speeds[slideOpts.speed] || $.fx.speeds._default;
            if (!slideOpts.sync) slideOpts.speed = slideOpts.speed / 2;
            slide.addClass(opts.slideClass);
        },
        updateView: function(isAfter, isDuring, forceEvent) {
            var opts = this.opts();
            if (!opts._initialized) return;
            var slideOpts = opts.API.getSlideOpts();
            var currSlide = opts.slides[opts.currSlide];
            if (!isAfter && isDuring !== true) {
                opts.API.trigger("cycle-update-view-before", [ opts, slideOpts, currSlide ]);
                if (opts.updateView < 0) return;
            }
            if (opts.slideActiveClass) {
                opts.slides.removeClass(opts.slideActiveClass).eq(opts.currSlide).addClass(opts.slideActiveClass);
            }
            if (isAfter && opts.hideNonActive) opts.slides.filter(":not(." + opts.slideActiveClass + ")").css("visibility", "hidden");
            if (opts.updateView === 0) {
                setTimeout(function() {
                    opts.API.trigger("cycle-update-view", [ opts, slideOpts, currSlide, isAfter ]);
                }, slideOpts.speed / (opts.sync ? 2 : 1));
            }
            if (opts.updateView !== 0) opts.API.trigger("cycle-update-view", [ opts, slideOpts, currSlide, isAfter ]);
            if (isAfter) opts.API.trigger("cycle-update-view-after", [ opts, slideOpts, currSlide ]);
        },
        getComponent: function(name) {
            var opts = this.opts();
            var selector = opts[name];
            if (typeof selector === "string") {
                return /^\s*[\>|\+|~]/.test(selector) ? opts.container.find(selector) : $(selector);
            }
            if (selector.jquery) return selector;
            return $(selector);
        },
        stackSlides: function(curr, next, fwd) {
            var opts = this.opts();
            if (!curr) {
                curr = opts.slides[opts.currSlide];
                next = opts.slides[opts.nextSlide];
                fwd = !opts.reverse;
            }
            $(curr).css("zIndex", opts.maxZ);
            var i;
            var z = opts.maxZ - 2;
            var len = opts.slideCount;
            if (fwd) {
                for (i = opts.currSlide + 1; i < len; i++) $(opts.slides[i]).css("zIndex", z--);
                for (i = 0; i < opts.currSlide; i++) $(opts.slides[i]).css("zIndex", z--);
            } else {
                for (i = opts.currSlide - 1; i >= 0; i--) $(opts.slides[i]).css("zIndex", z--);
                for (i = len - 1; i > opts.currSlide; i--) $(opts.slides[i]).css("zIndex", z--);
            }
            $(next).css("zIndex", opts.maxZ - 1);
        },
        getSlideIndex: function(el) {
            return this.opts().slides.index(el);
        }
    };
    $.fn.cycle.log = function log() {
        if (window.console && console.log) console.log("[cycle2] " + Array.prototype.join.call(arguments, " "));
    };
    $.fn.cycle.version = function() {
        return "Cycle2: " + version;
    };
    function lowerCase(s) {
        return (s || "").toLowerCase();
    }
    $.fn.cycle.transitions = {
        custom: {},
        none: {
            before: function(opts, curr, next, fwd) {
                opts.API.stackSlides(next, curr, fwd);
                opts.cssBefore = {
                    opacity: 1,
                    visibility: "visible",
                    display: "block"
                };
            }
        },
        fade: {
            before: function(opts, curr, next, fwd) {
                var css = opts.API.getSlideOpts(opts.nextSlide).slideCss || {};
                opts.API.stackSlides(curr, next, fwd);
                opts.cssBefore = $.extend(css, {
                    opacity: 0,
                    visibility: "visible",
                    display: "block"
                });
                opts.animIn = {
                    opacity: 1
                };
                opts.animOut = {
                    opacity: 0
                };
            }
        },
        fadeout: {
            before: function(opts, curr, next, fwd) {
                var css = opts.API.getSlideOpts(opts.nextSlide).slideCss || {};
                opts.API.stackSlides(curr, next, fwd);
                opts.cssBefore = $.extend(css, {
                    opacity: 1,
                    visibility: "visible",
                    display: "block"
                });
                opts.animOut = {
                    opacity: 0
                };
            }
        },
        scrollHorz: {
            before: function(opts, curr, next, fwd) {
                opts.API.stackSlides(curr, next, fwd);
                var w = opts.container.css("overflow", "hidden").width();
                opts.cssBefore = {
                    left: fwd ? w : -w,
                    top: 0,
                    opacity: 1,
                    visibility: "visible",
                    display: "block"
                };
                opts.cssAfter = {
                    zIndex: opts._maxZ - 2,
                    left: 0
                };
                opts.animIn = {
                    left: 0
                };
                opts.animOut = {
                    left: fwd ? -w : w
                };
            }
        }
    };
    $.fn.cycle.defaults = {
        allowWrap: true,
        autoSelector: ".cycle-slideshow[data-cycle-auto-init!=false]",
        delay: 0,
        easing: null,
        fx: "fade",
        hideNonActive: true,
        loop: 0,
        manualFx: undefined,
        manualSpeed: undefined,
        manualTrump: true,
        maxZ: 100,
        pauseOnHover: false,
        reverse: false,
        slideActiveClass: "cycle-slide-active",
        slideClass: "cycle-slide",
        slideCss: {
            position: "absolute",
            top: 0,
            left: 0
        },
        slides: "> img",
        speed: 500,
        startingSlide: 0,
        sync: true,
        timeout: 4e3,
        updateView: 0
    };
    $(document).ready(function() {
        console.log("automatically find and run slideshows");
        $($.fn.cycle.defaults.autoSelector).cycle();
    });
})(jQuery);

(function($) {
    "use strict";
    $.extend($.fn.cycle.defaults, {
        autoHeight: 0,
        autoHeightSpeed: 250,
        autoHeightEasing: null
    });
    $(document).on("cycle-initialized", function(e, opts) {
        var autoHeight = opts.autoHeight;
        var t = $.type(autoHeight);
        var resizeThrottle = null;
        var ratio;
        if (t !== "string" && t !== "number") return;
        opts.container.on("cycle-slide-added cycle-slide-removed", initAutoHeight);
        opts.container.on("cycle-destroyed", onDestroy);
        if (autoHeight == "container") {
            opts.container.on("cycle-before", onBefore);
        } else if (t === "string" && /\d+\:\d+/.test(autoHeight)) {
            ratio = autoHeight.match(/(\d+)\:(\d+)/);
            ratio = ratio[1] / ratio[2];
            opts._autoHeightRatio = ratio;
        }
        if (t !== "number") {
            opts._autoHeightOnResize = function() {
                clearTimeout(resizeThrottle);
                resizeThrottle = setTimeout(onResize, 50);
            };
            $(window).on("resize orientationchange", opts._autoHeightOnResize);
        }
        setTimeout(onResize, 30);
        function onResize() {
            initAutoHeight(e, opts);
        }
    });
    function initAutoHeight(e, opts) {
        var clone, height, sentinelIndex;
        var autoHeight = opts.autoHeight;
        if (autoHeight == "container") {
            height = $(opts.slides[opts.currSlide]).outerHeight();
            opts.container.height(height);
        } else if (opts._autoHeightRatio) {
            opts.container.height(opts.container.width() / opts._autoHeightRatio);
        } else if (autoHeight === "calc" || $.type(autoHeight) == "number" && autoHeight >= 0) {
            if (autoHeight === "calc") sentinelIndex = calcSentinelIndex(e, opts); else if (autoHeight >= opts.slides.length) sentinelIndex = 0; else sentinelIndex = autoHeight;
            if (sentinelIndex == opts._sentinelIndex) return;
            opts._sentinelIndex = sentinelIndex;
            if (opts._sentinel) opts._sentinel.remove();
            clone = $(opts.slides[sentinelIndex].cloneNode(true));
            clone.removeAttr("id name rel").find("[id],[name],[rel]").removeAttr("id name rel");
            clone.css({
                position: "static",
                visibility: "hidden",
                display: "block"
            }).prependTo(opts.container).addClass("cycle-sentinel cycle-slide").removeClass("cycle-slide-active");
            clone.find("*").css("visibility", "hidden");
            opts._sentinel = clone;
        }
    }
    function calcSentinelIndex(e, opts) {
        var index = 0, max = -1;
        opts.slides.each(function(i) {
            var h = $(this).height();
            if (h > max) {
                max = h;
                index = i;
            }
        });
        return index;
    }
    function onBefore(e, opts, outgoing, incoming, forward) {
        var h = $(incoming).outerHeight();
        opts.container.animate({
            height: h
        }, opts.autoHeightSpeed, opts.autoHeightEasing);
    }
    function onDestroy(e, opts) {
        if (opts._autoHeightOnResize) {
            $(window).off("resize orientationchange", opts._autoHeightOnResize);
            opts._autoHeightOnResize = null;
        }
        opts.container.off("cycle-slide-added cycle-slide-removed", initAutoHeight);
        opts.container.off("cycle-destroyed", onDestroy);
        opts.container.off("cycle-before", onBefore);
        if (opts._sentinel) {
            opts._sentinel.remove();
            opts._sentinel = null;
        }
    }
})(jQuery);

(function($) {
    "use strict";
    $.extend($.fn.cycle.defaults, {
        caption: "> .cycle-caption",
        captionTemplate: "{{slideNum}} / {{slideCount}}",
        overlay: "> .cycle-overlay",
        overlayTemplate: "<div>{{title}}</div><div>{{desc}}</div>",
        captionModule: "caption"
    });
    $(document).on("cycle-update-view", function(e, opts, slideOpts, currSlide) {
        if (opts.captionModule !== "caption") return;
        var el;
        $.each([ "caption", "overlay" ], function() {
            var name = this;
            var template = slideOpts[name + "Template"];
            var el = opts.API.getComponent(name);
            if (el.length && template) {
                el.html(opts.API.tmpl(template, slideOpts, opts, currSlide));
                el.show();
            } else {
                el.hide();
            }
        });
    });
    $(document).on("cycle-destroyed", function(e, opts) {
        var el;
        $.each([ "caption", "overlay" ], function() {
            var name = this, template = opts[name + "Template"];
            if (opts[name] && template) {
                el = opts.API.getComponent("caption");
                el.empty();
            }
        });
    });
})(jQuery);

(function($) {
    "use strict";
    var c2 = $.fn.cycle;
    $.fn.cycle = function(options) {
        var cmd, cmdFn, opts;
        var args = $.makeArray(arguments);
        if ($.type(options) == "number") {
            return this.cycle("goto", options);
        }
        if ($.type(options) == "string") {
            return this.each(function() {
                var cmdArgs;
                cmd = options;
                opts = $(this).data("cycle.opts");
                if (opts === undefined) {
                    c2.log('slideshow must be initialized before sending commands; "' + cmd + '" ignored');
                    return;
                } else {
                    cmd = cmd == "goto" ? "jump" : cmd;
                    cmdFn = opts.API[cmd];
                    if ($.isFunction(cmdFn)) {
                        cmdArgs = $.makeArray(args);
                        cmdArgs.shift();
                        return cmdFn.apply(opts.API, cmdArgs);
                    } else {
                        c2.log("unknown command: ", cmd);
                    }
                }
            });
        } else {
            return c2.apply(this, arguments);
        }
    };
    $.extend($.fn.cycle, c2);
    $.extend(c2.API, {
        next: function() {
            var opts = this.opts();
            if (opts.busy && !opts.manualTrump) return;
            var count = opts.reverse ? -1 : 1;
            if (opts.allowWrap === false && opts.currSlide + count >= opts.slideCount) return;
            opts.API.advanceSlide(count);
            opts.API.trigger("cycle-next", [ opts ]).log("cycle-next");
        },
        prev: function() {
            var opts = this.opts();
            if (opts.busy && !opts.manualTrump) return;
            var count = opts.reverse ? 1 : -1;
            if (opts.allowWrap === false && opts.currSlide + count < 0) return;
            opts.API.advanceSlide(count);
            opts.API.trigger("cycle-prev", [ opts ]).log("cycle-prev");
        },
        destroy: function() {
            this.stop();
            var opts = this.opts();
            var clean = $.isFunction($._data) ? $._data : $.noop;
            clearTimeout(opts.timeoutId);
            opts.timeoutId = 0;
            opts.API.stop();
            opts.API.trigger("cycle-destroyed", [ opts ]).log("cycle-destroyed");
            opts.container.removeData();
            clean(opts.container[0], "parsedAttrs", false);
            if (!opts.retainStylesOnDestroy) {
                opts.container.removeAttr("style");
                opts.slides.removeAttr("style");
                opts.slides.removeClass(opts.slideActiveClass);
            }
            opts.slides.each(function() {
                $(this).removeData();
                clean(this, "parsedAttrs", false);
            });
        },
        jump: function(index, fx) {
            var fwd;
            var opts = this.opts();
            if (opts.busy && !opts.manualTrump) return;
            var num = parseInt(index, 10);
            if (isNaN(num) || num < 0 || num >= opts.slides.length) {
                opts.API.log("goto: invalid slide index: " + num);
                return;
            }
            if (num == opts.currSlide) {
                opts.API.log("goto: skipping, already on slide", num);
                return;
            }
            opts.nextSlide = num;
            clearTimeout(opts.timeoutId);
            opts.timeoutId = 0;
            opts.API.log("goto: ", num, " (zero-index)");
            fwd = opts.currSlide < opts.nextSlide;
            opts._tempFx = fx;
            opts.API.prepareTx(true, fwd);
        },
        stop: function() {
            var opts = this.opts();
            var pauseObj = opts.container;
            clearTimeout(opts.timeoutId);
            opts.timeoutId = 0;
            opts.API.stopTransition();
            if (opts.pauseOnHover) {
                if (opts.pauseOnHover !== true) pauseObj = $(opts.pauseOnHover);
                pauseObj.off("mouseenter mouseleave");
            }
            opts.API.trigger("cycle-stopped", [ opts ]).log("cycle-stopped");
        },
        reinit: function() {
            var opts = this.opts();
            opts.API.destroy();
            opts.container.cycle();
        },
        remove: function(index) {
            var opts = this.opts();
            var slide, slideToRemove, slides = [], slideNum = 1;
            for (var i = 0; i < opts.slides.length; i++) {
                slide = opts.slides[i];
                if (i == index) {
                    slideToRemove = slide;
                } else {
                    slides.push(slide);
                    $(slide).data("cycle.opts").slideNum = slideNum;
                    slideNum++;
                }
            }
            if (slideToRemove) {
                opts.slides = $(slides);
                opts.slideCount--;
                $(slideToRemove).remove();
                if (index == opts.currSlide) opts.API.advanceSlide(1); else if (index < opts.currSlide) opts.currSlide--; else opts.currSlide++;
                opts.API.trigger("cycle-slide-removed", [ opts, index, slideToRemove ]).log("cycle-slide-removed");
                opts.API.updateView();
            }
        }
    });
    $(document).on("click.cycle", "[data-cycle-cmd]", function(e) {
        e.preventDefault();
        var el = $(this);
        var command = el.data("cycle-cmd");
        var context = el.data("cycle-context") || ".cycle-slideshow";
        $(context).cycle(command, el.data("cycle-arg"));
    });
})(jQuery);

(function($) {
    "use strict";
    $(document).on("cycle-pre-initialize", function(e, opts) {
        onHashChange(opts, true);
        opts._onHashChange = function() {
            onHashChange(opts, false);
        };
        $(window).on("hashchange", opts._onHashChange);
    });
    $(document).on("cycle-update-view", function(e, opts, slideOpts) {
        if (slideOpts.hash && "#" + slideOpts.hash != window.location.hash) {
            opts._hashFence = true;
            window.location.hash = slideOpts.hash;
        }
    });
    $(document).on("cycle-destroyed", function(e, opts) {
        if (opts._onHashChange) {
            $(window).off("hashchange", opts._onHashChange);
        }
    });
    function onHashChange(opts, setStartingSlide) {
        var hash;
        if (opts._hashFence) {
            opts._hashFence = false;
            return;
        }
        hash = window.location.hash.substring(1);
        opts.slides.each(function(i) {
            if ($(this).data("cycle-hash") == hash) {
                if (setStartingSlide === true) {
                    opts.startingSlide = i;
                } else {
                    var fwd = opts.currSlide < i;
                    opts.nextSlide = i;
                    opts.API.prepareTx(true, fwd);
                }
                return false;
            }
        });
    }
})(jQuery);

(function($) {
    "use strict";
    $.extend($.fn.cycle.defaults, {
        loader: false
    });
    $(document).on("cycle-bootstrap", function(e, opts) {
        var addFn;
        if (!opts.loader) return;
        addFn = opts.API.add;
        opts.API.add = add;
        function add(slides, prepend) {
            var slideArr = [];
            if ($.type(slides) == "string") slides = $.trim(slides); else if ($.type(slides) === "array") {
                for (var i = 0; i < slides.length; i++) slides[i] = $(slides[i])[0];
            }
            slides = $(slides);
            var slideCount = slides.length;
            if (!slideCount) return;
            slides.css("visibility", "hidden").appendTo("body").each(function(i) {
                var count = 0;
                var slide = $(this);
                var images = slide.is("img") ? slide : slide.find("img");
                slide.data("index", i);
                images = images.filter(":not(.cycle-loader-ignore)").filter(':not([src=""])');
                if (!images.length) {
                    --slideCount;
                    slideArr.push(slide);
                    return;
                }
                count = images.length;
                images.each(function() {
                    if (this.complete) {
                        imageLoaded();
                    } else {
                        $(this).load(function() {
                            imageLoaded();
                        }).on("error", function() {
                            if (--count === 0) {
                                opts.API.log("slide skipped; img not loaded:", this.src);
                                if (--slideCount === 0 && opts.loader == "wait") {
                                    addFn.apply(opts.API, [ slideArr, prepend ]);
                                }
                            }
                        });
                    }
                });
                function imageLoaded() {
                    if (--count === 0) {
                        --slideCount;
                        addSlide(slide);
                    }
                }
            });
            if (slideCount) opts.container.addClass("cycle-loading");
            function addSlide(slide) {
                var curr;
                if (opts.loader == "wait") {
                    slideArr.push(slide);
                    if (slideCount === 0) {
                        slideArr.sort(sorter);
                        addFn.apply(opts.API, [ slideArr, prepend ]);
                        opts.container.removeClass("cycle-loading");
                    }
                } else {
                    curr = $(opts.slides[opts.currSlide]);
                    addFn.apply(opts.API, [ slide, prepend ]);
                    curr.show();
                    opts.container.removeClass("cycle-loading");
                }
            }
            function sorter(a, b) {
                return a.data("index") - b.data("index");
            }
        }
    });
})(jQuery);

(function($) {
    "use strict";
    $.extend($.fn.cycle.defaults, {
        pager: "> .cycle-pager",
        pagerActiveClass: "cycle-pager-active",
        pagerEvent: "click.cycle",
        pagerEventBubble: undefined,
        pagerTemplate: "<span>&bull;</span>"
    });
    $(document).on("cycle-bootstrap", function(e, opts, API) {
        API.buildPagerLink = buildPagerLink;
    });
    $(document).on("cycle-slide-added", function(e, opts, slideOpts, slideAdded) {
        if (opts.pager) {
            opts.API.buildPagerLink(opts, slideOpts, slideAdded);
            opts.API.page = page;
        }
    });
    $(document).on("cycle-slide-removed", function(e, opts, index, slideRemoved) {
        if (opts.pager) {
            var pagers = opts.API.getComponent("pager");
            pagers.each(function() {
                var pager = $(this);
                $(pager.children()[index]).remove();
            });
        }
    });
    $(document).on("cycle-update-view", function(e, opts, slideOpts) {
        var pagers;
        if (opts.pager) {
            pagers = opts.API.getComponent("pager");
            pagers.each(function() {
                $(this).children().removeClass(opts.pagerActiveClass).eq(opts.currSlide).addClass(opts.pagerActiveClass);
            });
        }
    });
    $(document).on("cycle-destroyed", function(e, opts) {
        var pager = opts.API.getComponent("pager");
        if (pager) {
            pager.children().off(opts.pagerEvent);
            if (opts.pagerTemplate) pager.empty();
        }
    });
    function buildPagerLink(opts, slideOpts, slide) {
        var pagerLink;
        var pagers = opts.API.getComponent("pager");
        pagers.each(function() {
            var pager = $(this);
            if (slideOpts.pagerTemplate) {
                var markup = opts.API.tmpl(slideOpts.pagerTemplate, slideOpts, opts, slide[0]);
                pagerLink = $(markup).appendTo(pager);
            } else {
                pagerLink = pager.children().eq(opts.slideCount - 1);
            }
            pagerLink.on(opts.pagerEvent, function(e) {
                if (!opts.pagerEventBubble) e.preventDefault();
                opts.API.page(pager, e.currentTarget);
            });
        });
    }
    function page(pager, target) {
        var opts = this.opts();
        if (opts.busy && !opts.manualTrump) return;
        var index = pager.children().index(target);
        var nextSlide = index;
        var fwd = opts.currSlide < nextSlide;
        if (opts.currSlide == nextSlide) {
            return;
        }
        opts.nextSlide = nextSlide;
        opts._tempFx = opts.pagerFx;
        opts.API.prepareTx(true, fwd);
        opts.API.trigger("cycle-pager-activated", [ opts, pager, target ]);
    }
})(jQuery);

(function($) {
    "use strict";
    $.extend($.fn.cycle.defaults, {
        next: "> .cycle-next",
        nextEvent: "click.cycle",
        disabledClass: "disabled",
        prev: "> .cycle-prev",
        prevEvent: "click.cycle",
        swipe: false
    });
    $(document).on("cycle-initialized", function(e, opts) {
        opts.API.getComponent("next").on(opts.nextEvent, function(e) {
            e.preventDefault();
            opts.API.next();
        });
        opts.API.getComponent("prev").on(opts.prevEvent, function(e) {
            e.preventDefault();
            opts.API.prev();
        });
        if (opts.swipe) {
            var nextEvent = opts.swipeVert ? "swipeUp.cycle" : "swipeLeft.cycle swipeleft.cycle";
            var prevEvent = opts.swipeVert ? "swipeDown.cycle" : "swipeRight.cycle swiperight.cycle";
            opts.container.on(nextEvent, function(e) {
                opts._tempFx = opts.swipeFx;
                opts.API.next();
            });
            opts.container.on(prevEvent, function() {
                opts._tempFx = opts.swipeFx;
                opts.API.prev();
            });
        }
    });
    $(document).on("cycle-update-view", function(e, opts, slideOpts, currSlide) {
        if (opts.allowWrap) return;
        var cls = opts.disabledClass;
        var next = opts.API.getComponent("next");
        var prev = opts.API.getComponent("prev");
        var prevBoundry = opts._prevBoundry || 0;
        var nextBoundry = opts._nextBoundry !== undefined ? opts._nextBoundry : opts.slideCount - 1;
        if (opts.currSlide == nextBoundry) next.addClass(cls).prop("disabled", true); else next.removeClass(cls).prop("disabled", false);
        if (opts.currSlide === prevBoundry) prev.addClass(cls).prop("disabled", true); else prev.removeClass(cls).prop("disabled", false);
    });
    $(document).on("cycle-destroyed", function(e, opts) {
        opts.API.getComponent("prev").off(opts.nextEvent);
        opts.API.getComponent("next").off(opts.prevEvent);
        opts.container.off("swipeleft.cycle swiperight.cycle swipeLeft.cycle swipeRight.cycle swipeUp.cycle swipeDown.cycle");
    });
})(jQuery);

(function($) {
    "use strict";
    $.extend($.fn.cycle.defaults, {
        progressive: false
    });
    $(document).on("cycle-pre-initialize", function(e, opts) {
        if (!opts.progressive) return;
        var API = opts.API;
        var nextFn = API.next;
        var prevFn = API.prev;
        var prepareTxFn = API.prepareTx;
        var type = $.type(opts.progressive);
        var slides, scriptEl;
        if (type == "array") {
            slides = opts.progressive;
        } else if ($.isFunction(opts.progressive)) {
            slides = opts.progressive(opts);
        } else if (type == "string") {
            scriptEl = $(opts.progressive);
            slides = $.trim(scriptEl.html());
            if (!slides) return;
            if (/^(\[)/.test(slides)) {
                try {
                    slides = $.parseJSON(slides);
                } catch (err) {
                    API.log("error parsing progressive slides", err);
                    return;
                }
            } else {
                slides = slides.split(new RegExp(scriptEl.data("cycle-split") || "\n"));
                if (!slides[slides.length - 1]) slides.pop();
            }
        }
        if (prepareTxFn) {
            API.prepareTx = function(manual, fwd) {
                var index, slide;
                if (manual || slides.length === 0) {
                    prepareTxFn.apply(opts.API, [ manual, fwd ]);
                    return;
                }
                if (fwd && opts.currSlide == opts.slideCount - 1) {
                    slide = slides[0];
                    slides = slides.slice(1);
                    opts.container.one("cycle-slide-added", function(e, opts) {
                        setTimeout(function() {
                            opts.API.advanceSlide(1);
                        }, 50);
                    });
                    opts.API.add(slide);
                } else if (!fwd && opts.currSlide === 0) {
                    index = slides.length - 1;
                    slide = slides[index];
                    slides = slides.slice(0, index);
                    opts.container.one("cycle-slide-added", function(e, opts) {
                        setTimeout(function() {
                            opts.currSlide = 1;
                            opts.API.advanceSlide(-1);
                        }, 50);
                    });
                    opts.API.add(slide, true);
                } else {
                    prepareTxFn.apply(opts.API, [ manual, fwd ]);
                }
            };
        }
        if (nextFn) {
            API.next = function() {
                var opts = this.opts();
                if (slides.length && opts.currSlide == opts.slideCount - 1) {
                    var slide = slides[0];
                    slides = slides.slice(1);
                    opts.container.one("cycle-slide-added", function(e, opts) {
                        nextFn.apply(opts.API);
                        opts.container.removeClass("cycle-loading");
                    });
                    opts.container.addClass("cycle-loading");
                    opts.API.add(slide);
                } else {
                    nextFn.apply(opts.API);
                }
            };
        }
        if (prevFn) {
            API.prev = function() {
                var opts = this.opts();
                if (slides.length && opts.currSlide === 0) {
                    var index = slides.length - 1;
                    var slide = slides[index];
                    slides = slides.slice(0, index);
                    opts.container.one("cycle-slide-added", function(e, opts) {
                        opts.currSlide = 1;
                        opts.API.advanceSlide(-1);
                        opts.container.removeClass("cycle-loading");
                    });
                    opts.container.addClass("cycle-loading");
                    opts.API.add(slide, true);
                } else {
                    prevFn.apply(opts.API);
                }
            };
        }
    });
})(jQuery);

(function($) {
    "use strict";
    $.extend($.fn.cycle.defaults, {
        tmplRegex: "{{((.)?.*?)}}"
    });
    $.extend($.fn.cycle.API, {
        tmpl: function(str, opts) {
            var regex = new RegExp(opts.tmplRegex || $.fn.cycle.defaults.tmplRegex, "g");
            var args = $.makeArray(arguments);
            args.shift();
            return str.replace(regex, function(_, str) {
                var i, j, obj, prop, names = str.split(".");
                for (i = 0; i < args.length; i++) {
                    obj = args[i];
                    if (!obj) continue;
                    if (names.length > 1) {
                        prop = obj;
                        for (j = 0; j < names.length; j++) {
                            obj = prop;
                            prop = prop[names[j]] || str;
                        }
                    } else {
                        prop = obj[str];
                    }
                    if ($.isFunction(prop)) return prop.apply(obj, args);
                    if (prop !== undefined && prop !== null && prop != str) return prop;
                }
                return str;
            });
        }
    });
})(jQuery);

(function($) {
    "use strict";
    $(document).on("cycle-bootstrap", function(e, opts, API) {
        if (opts.fx !== "carousel") return;
        API.getSlideIndex = function(el) {
            var slides = this.opts()._carouselWrap.children();
            var i = slides.index(el);
            return i % slides.length;
        };
        API.next = function() {
            var count = opts.reverse ? -1 : 1;
            if (opts.allowWrap === false && opts.currSlide + count > opts.slideCount - opts.carouselVisible) return;
            opts.API.advanceSlide(count);
            opts.API.trigger("cycle-next", [ opts ]).log("cycle-next");
        };
    });
    $.fn.cycle.transitions.carousel = {
        preInit: function(opts) {
            opts.hideNonActive = false;
            opts.container.on("cycle-destroyed", $.proxy(this.onDestroy, opts.API));
            opts.API.stopTransition = this.stopTransition;
            for (var i = 0; i < opts.startingSlide; i++) {
                opts.container.append(opts.slides[0]);
            }
        },
        postInit: function(opts) {
            var i, j, slide, pagerCutoffIndex, wrap;
            var vert = opts.carouselVertical;
            if (opts.carouselVisible && opts.carouselVisible > opts.slideCount) opts.carouselVisible = opts.slideCount - 1;
            var visCount = opts.carouselVisible || opts.slides.length;
            var slideCSS = {
                display: vert ? "block" : "inline-block",
                position: "static"
            };
            opts.container.css({
                position: "relative",
                overflow: "hidden"
            });
            opts.slides.css(slideCSS);
            opts._currSlide = opts.currSlide;
            wrap = $('<div class="cycle-carousel-wrap"></div>').prependTo(opts.container).css({
                margin: 0,
                padding: 0,
                top: 0,
                left: 0,
                position: "absolute"
            }).append(opts.slides);
            opts._carouselWrap = wrap;
            if (!vert) wrap.css("white-space", "nowrap");
            if (opts.allowWrap !== false) {
                for (j = 0; j < (opts.carouselVisible === undefined ? 2 : 1); j++) {
                    for (i = 0; i < opts.slideCount; i++) {
                        wrap.append(opts.slides[i].cloneNode(true));
                    }
                    i = opts.slideCount;
                    while (i--) {
                        wrap.prepend(opts.slides[i].cloneNode(true));
                    }
                }
                wrap.find(".cycle-slide-active").removeClass("cycle-slide-active");
                opts.slides.eq(opts.startingSlide).addClass("cycle-slide-active");
            }
            if (opts.pager && opts.allowWrap === false) {
                pagerCutoffIndex = opts.slideCount - visCount;
                $(opts.pager).children().filter(":gt(" + pagerCutoffIndex + ")").hide();
            }
            opts._nextBoundry = opts.slideCount - opts.carouselVisible;
            this.prepareDimensions(opts);
        },
        prepareDimensions: function(opts) {
            var dim, offset, pagerCutoffIndex, tmp;
            var vert = opts.carouselVertical;
            var visCount = opts.carouselVisible || opts.slides.length;
            if (opts.carouselFluid && opts.carouselVisible) {
                if (!opts._carouselResizeThrottle) {
                    this.fluidSlides(opts);
                }
            } else if (opts.carouselVisible && opts.carouselSlideDimension) {
                dim = visCount * opts.carouselSlideDimension;
                opts.container[vert ? "height" : "width"](dim);
            } else if (opts.carouselVisible) {
                dim = visCount * $(opts.slides[0])[vert ? "outerHeight" : "outerWidth"](true);
                opts.container[vert ? "height" : "width"](dim);
            }
            offset = opts.carouselOffset || 0;
            if (opts.allowWrap !== false) {
                if (opts.carouselSlideDimension) {
                    offset -= (opts.slideCount + opts.currSlide) * opts.carouselSlideDimension;
                } else {
                    tmp = opts._carouselWrap.children();
                    for (var j = 0; j < opts.slideCount + opts.currSlide; j++) {
                        offset -= $(tmp[j])[vert ? "outerHeight" : "outerWidth"](true);
                    }
                }
            }
            opts._carouselWrap.css(vert ? "top" : "left", offset);
        },
        fluidSlides: function(opts) {
            var timeout;
            var slide = opts.slides.eq(0);
            var adjustment = slide.outerWidth() - slide.width();
            var prepareDimensions = this.prepareDimensions;
            $(window).on("resize", resizeThrottle);
            opts._carouselResizeThrottle = resizeThrottle;
            onResize();
            function resizeThrottle() {
                clearTimeout(timeout);
                timeout = setTimeout(onResize, 20);
            }
            function onResize() {
                opts._carouselWrap.stop(false, true);
                var slideWidth = opts.container.width() / opts.carouselVisible;
                slideWidth = Math.ceil(slideWidth - adjustment);
                opts._carouselWrap.children().width(slideWidth);
                if (opts._sentinel) opts._sentinel.width(slideWidth);
                prepareDimensions(opts);
            }
        },
        transition: function(opts, curr, next, fwd, callback) {
            var moveBy, props = {};
            var hops = opts.nextSlide - opts.currSlide;
            var vert = opts.carouselVertical;
            var speed = opts.speed;
            if (opts.allowWrap === false) {
                fwd = hops > 0;
                var currSlide = opts._currSlide;
                var maxCurr = opts.slideCount - opts.carouselVisible;
                if (hops > 0 && opts.nextSlide > maxCurr && currSlide == maxCurr) {
                    hops = 0;
                } else if (hops > 0 && opts.nextSlide > maxCurr) {
                    hops = opts.nextSlide - currSlide - (opts.nextSlide - maxCurr);
                } else if (hops < 0 && opts.currSlide > maxCurr && opts.nextSlide > maxCurr) {
                    hops = 0;
                } else if (hops < 0 && opts.currSlide > maxCurr) {
                    hops += opts.currSlide - maxCurr;
                } else currSlide = opts.currSlide;
                moveBy = this.getScroll(opts, vert, currSlide, hops);
                opts.API.opts()._currSlide = opts.nextSlide > maxCurr ? maxCurr : opts.nextSlide;
            } else {
                if (fwd && opts.nextSlide === 0) {
                    moveBy = this.getDim(opts, opts.currSlide, vert);
                    callback = this.genCallback(opts, fwd, vert, callback);
                } else if (!fwd && opts.nextSlide == opts.slideCount - 1) {
                    moveBy = this.getDim(opts, opts.currSlide, vert);
                    callback = this.genCallback(opts, fwd, vert, callback);
                } else {
                    moveBy = this.getScroll(opts, vert, opts.currSlide, hops);
                }
            }
            props[vert ? "top" : "left"] = fwd ? "-=" + moveBy : "+=" + moveBy;
            if (opts.throttleSpeed) speed = moveBy / $(opts.slides[0])[vert ? "height" : "width"]() * opts.speed;
            opts._carouselWrap.animate(props, speed, opts.easing, callback);
        },
        getDim: function(opts, index, vert) {
            var slide = $(opts.slides[index]);
            return slide[vert ? "outerHeight" : "outerWidth"](true);
        },
        getScroll: function(opts, vert, currSlide, hops) {
            var i, moveBy = 0;
            if (hops > 0) {
                for (i = currSlide; i < currSlide + hops; i++) moveBy += this.getDim(opts, i, vert);
            } else {
                for (i = currSlide; i > currSlide + hops; i--) moveBy += this.getDim(opts, i, vert);
            }
            return moveBy;
        },
        genCallback: function(opts, fwd, vert, callback) {
            return function() {
                var pos = $(opts.slides[opts.nextSlide]).position();
                var offset = 0 - pos[vert ? "top" : "left"] + (opts.carouselOffset || 0);
                opts._carouselWrap.css(opts.carouselVertical ? "top" : "left", offset);
                callback();
            };
        },
        stopTransition: function() {
            var opts = this.opts();
            opts.slides.stop(false, true);
            opts._carouselWrap.stop(false, true);
        },
        onDestroy: function(e) {
            var opts = this.opts();
            if (opts._carouselResizeThrottle) $(window).off("resize", opts._carouselResizeThrottle);
            opts.slides.prependTo(opts.container);
            opts._carouselWrap.remove();
        }
    };
})(jQuery);

(function($) {
    "use strict";
    var backface, style = document.createElement("div").style, tx = $.fn.cycle.transitions, supported = style.transform !== undefined || style.MozTransform !== undefined || style.webkitTransform !== undefined || style.oTransform !== undefined || style.msTransform !== undefined;
    if (supported && style.msTransform !== undefined) {
        style.msTransform = "rotateY(0deg)";
        if (!style.msTransform) supported = false;
    }
    if (supported) {
        tx.flipHorz = getTransition(getRotate("Y"));
        tx.flipVert = getTransition(getRotate("X"));
        backface = {
            "-webkit-backface-visibility": "hidden",
            "-moz-backface-visibility": "hidden",
            "-o-backface-visibility": "hidden",
            "backface-visibility": "hidden"
        };
    } else {
        tx.flipHorz = tx.scrollHorz;
        tx.flipVert = tx.scrollVert || tx.scrollHorz;
    }
    function getTransition(rotateFn) {
        return {
            preInit: function(opts) {
                opts.slides.css(backface);
            },
            transition: function(slideOpts, currEl, nextEl, fwd, callback) {
                var opts = slideOpts, curr = $(currEl), next = $(nextEl), speed = opts.speed / 2;
                rotateFn.call(next, -90);
                next.css({
                    display: "block",
                    visibility: "visible",
                    "background-position": "-90px",
                    opacity: 1
                });
                curr.css("background-position", "0px");
                curr.animate({
                    backgroundPosition: 90
                }, {
                    step: rotateFn,
                    duration: speed,
                    easing: opts.easeOut || opts.easing,
                    complete: function() {
                        slideOpts.API.updateView(false, true);
                        next.animate({
                            backgroundPosition: 0
                        }, {
                            step: rotateFn,
                            duration: speed,
                            easing: opts.easeIn || opts.easing,
                            complete: callback
                        });
                    }
                });
            }
        };
    }
    function getRotate(dir) {
        return function(degrees) {
            var el = $(this);
            el.css({
                "-webkit-transform": "rotate" + dir + "(" + degrees + "deg)",
                "-moz-transform": "rotate" + dir + "(" + degrees + "deg)",
                "-ms-transform": "rotate" + dir + "(" + degrees + "deg)",
                "-o-transform": "rotate" + dir + "(" + degrees + "deg)",
                transform: "rotate" + dir + "(" + degrees + "deg)"
            });
        };
    }
})(jQuery);

(function($) {
    "use strict";
    function cleartype(before, opts, el) {
        if (before && el.style.filter) {
            opts._filter = el.style.filter;
            try {
                el.style.removeAttribute("filter");
            } catch (smother) {}
        } else if (!before && opts._filter) {
            el.style.filter = opts._filter;
        }
    }
    $.extend($.fn.cycle.transitions, {
        fade: {
            before: function(opts, curr, next, fwd) {
                var css = opts.API.getSlideOpts(opts.nextSlide).slideCss || {};
                opts.API.stackSlides(curr, next, fwd);
                opts.cssBefore = $.extend(css, {
                    opacity: 0,
                    visibility: "visible",
                    display: "block"
                });
                opts.animIn = {
                    opacity: 1
                };
                opts.animOut = {
                    opacity: 0
                };
                cleartype(true, opts, next);
            },
            after: function(opts, curr, next) {
                cleartype(false, opts, next);
            }
        },
        fadeout: {
            before: function(opts, curr, next, fwd) {
                var css = opts.API.getSlideOpts(opts.nextSlide).slideCss || {};
                opts.API.stackSlides(curr, next, fwd);
                opts.cssAfter = $.extend(css, {
                    opacity: 0,
                    visibility: "hidden"
                });
                opts.cssBefore = $.extend(css, {
                    opacity: 1,
                    visibility: "visible",
                    display: "block"
                });
                opts.animOut = {
                    opacity: 0
                };
                cleartype(true, opts, next);
            },
            after: function(opts, curr, next) {
                cleartype(false, opts, next);
            }
        }
    });
})(jQuery);

(function($) {
    "use strict";
    $.fn.cycle.transitions.scrollVert = {
        before: function(opts, curr, next, fwd) {
            opts.API.stackSlides(opts, curr, next, fwd);
            var height = opts.container.css("overflow", "hidden").height();
            opts.cssBefore = {
                top: fwd ? -height : height,
                left: 0,
                opacity: 1,
                display: "block",
                visibility: "visible"
            };
            opts.animIn = {
                top: 0
            };
            opts.animOut = {
                top: fwd ? height : -height
            };
        }
    };
})(jQuery);

(function($) {
    "use strict";
    $.fn.cycle.transitions.shuffle = {
        transition: function(opts, currEl, nextEl, fwd, callback) {
            $(nextEl).css({
                display: "block",
                visibility: "visible"
            });
            var width = opts.container.css("overflow", "visible").width();
            var speed = opts.speed / 2;
            var element = fwd ? currEl : nextEl;
            opts = opts.API.getSlideOpts(fwd ? opts.currSlide : opts.nextSlide);
            var props1 = {
                left: -width,
                top: 15
            };
            var props2 = opts.slideCss || {
                left: 0,
                top: 0
            };
            if (opts.shuffleLeft !== undefined) {
                props1.left = props1.left + parseInt(opts.shuffleLeft, 10) || 0;
            } else if (opts.shuffleRight !== undefined) {
                props1.left = width + parseInt(opts.shuffleRight, 10) || 0;
            }
            if (opts.shuffleTop) {
                props1.top = opts.shuffleTop;
            }
            $(element).animate(props1, speed, opts.easeIn || opts.easing).queue("fx", $.proxy(reIndex, this)).animate(props2, speed, opts.easeOut || opts.easing, callback);
            function reIndex(nextFn) {
                this.stack(opts, currEl, nextEl, fwd);
                nextFn();
            }
        },
        stack: function(opts, currEl, nextEl, fwd) {
            var i, z;
            if (fwd) {
                opts.API.stackSlides(nextEl, currEl, fwd);
                $(currEl).css("zIndex", 1);
            } else {
                z = 1;
                for (i = opts.nextSlide - 1; i >= 0; i--) {
                    $(opts.slides[i]).css("zIndex", z++);
                }
                for (i = opts.slideCount - 1; i > opts.nextSlide; i--) {
                    $(opts.slides[i]).css("zIndex", z++);
                }
                $(nextEl).css("zIndex", opts.maxZ);
                $(currEl).css("zIndex", opts.maxZ - 1);
            }
        }
    };
})(jQuery);

(function($) {
    "use strict";
    $.fn.cycle.transitions.tileSlide = $.fn.cycle.transitions.tileBlind = {
        before: function(opts, curr, next, fwd) {
            opts.API.stackSlides(curr, next, fwd);
            $(curr).css({
                display: "block",
                visibility: "visible"
            });
            opts.container.css("overflow", "hidden");
            opts.tileDelay = opts.tileDelay || opts.fx == "tileSlide" ? 100 : 125;
            opts.tileCount = opts.tileCount || 7;
            opts.tileVertical = opts.tileVertical !== false;
            if (!opts.container.data("cycleTileInitialized")) {
                opts.container.on("cycle-destroyed", $.proxy(this.onDestroy, opts.API));
                opts.container.data("cycleTileInitialized", true);
            }
        },
        transition: function(opts, curr, next, fwd, callback) {
            opts.slides.not(curr).not(next).css("visibility", "hidden");
            var tiles = $();
            var $curr = $(curr), $next = $(next);
            var tile, tileWidth, tileHeight, lastTileWidth, lastTileHeight, num = opts.tileCount, vert = opts.tileVertical, height = opts.container.height(), width = opts.container.width();
            if (vert) {
                tileWidth = Math.floor(width / num);
                lastTileWidth = width - tileWidth * (num - 1);
                tileHeight = lastTileHeight = height;
            } else {
                tileWidth = lastTileWidth = width;
                tileHeight = Math.floor(height / num);
                lastTileHeight = height - tileHeight * (num - 1);
            }
            opts.container.find(".cycle-tiles-container").remove();
            var animCSS;
            var tileCSS = {
                left: 0,
                top: 0,
                overflow: "hidden",
                position: "absolute",
                margin: 0,
                padding: 0
            };
            if (vert) {
                animCSS = opts.fx == "tileSlide" ? {
                    top: height
                } : {
                    width: 0
                };
            } else {
                animCSS = opts.fx == "tileSlide" ? {
                    left: width
                } : {
                    height: 0
                };
            }
            var tilesContainer = $('<div class="cycle-tiles-container"></div>');
            tilesContainer.css({
                zIndex: $curr.css("z-index"),
                overflow: "visible",
                position: "absolute",
                top: 0,
                left: 0,
                direction: "ltr"
            });
            tilesContainer.insertBefore(next);
            for (var i = 0; i < num; i++) {
                tile = $("<div></div>").css(tileCSS).css({
                    width: num - 1 === i ? lastTileWidth : tileWidth,
                    height: num - 1 === i ? lastTileHeight : tileHeight,
                    marginLeft: vert ? i * tileWidth : 0,
                    marginTop: vert ? 0 : i * tileHeight
                }).append($curr.clone().css({
                    position: "relative",
                    maxWidth: "none",
                    width: $curr.width(),
                    margin: 0,
                    padding: 0,
                    marginLeft: vert ? -(i * tileWidth) : 0,
                    marginTop: vert ? 0 : -(i * tileHeight)
                }));
                tiles = tiles.add(tile);
            }
            tilesContainer.append(tiles);
            $curr.css("visibility", "hidden");
            $next.css({
                opacity: 1,
                display: "block",
                visibility: "visible"
            });
            animateTile(fwd ? 0 : num - 1);
            opts._tileAniCallback = function() {
                $next.css({
                    display: "block",
                    visibility: "visible"
                });
                $curr.css("visibility", "hidden");
                tilesContainer.remove();
                callback();
            };
            function animateTile(i) {
                tiles.eq(i).animate(animCSS, {
                    duration: opts.speed,
                    easing: opts.easing,
                    complete: function() {
                        if (fwd ? num - 1 === i : 0 === i) {
                            opts._tileAniCallback();
                        }
                    }
                });
                setTimeout(function() {
                    if (fwd ? num - 1 !== i : 0 !== i) {
                        animateTile(fwd ? i + 1 : i - 1);
                    }
                }, opts.tileDelay);
            }
        },
        stopTransition: function(opts) {
            opts.container.find("*").stop(true, true);
            if (opts._tileAniCallback) opts._tileAniCallback();
        },
        onDestroy: function(e) {
            var opts = this.opts();
            opts.container.find(".cycle-tiles-container").remove();
        }
    };
})(jQuery);

(function($) {
    "use strict";
    $.extend($.fn.cycle.defaults, {
        captionFxOut: "fadeOut",
        captionFxIn: "fadeIn",
        captionFxSel: undefined,
        overlayFxOut: "fadeOut",
        overlayFxIn: "fadeIn",
        overlayFxSel: undefined
    });
    $(document).on("cycle-bootstrap", function(e, opts) {
        opts.container.on("cycle-update-view-before", update);
        opts.container.one("cycle-update-view-after", init);
    });
    function update(e, opts, slideOpts, currSlide, isAfter) {
        if (opts.captionPlugin !== "caption2") return;
        $.each([ "caption", "overlay" ], function() {
            var fxBase = this + "Fx", fx = opts[fxBase + "Out"] || "hide", template = slideOpts[this + "Template"], el = opts.API.getComponent(this), sel = opts[fxBase + "Sel"], speed = opts.speed, animEl;
            if (opts.sync) speed = speed / 2;
            animEl = sel ? el.find(sel) : el;
            if (el.length && template) {
                if (fx == "hide") speed = 0;
                animEl[fx](speed, function() {
                    var content = opts.API.tmpl(template, slideOpts, opts, currSlide);
                    el.html(content);
                    animEl = sel ? el.find(sel) : el;
                    if (sel) animEl.hide();
                    fx = opts[fxBase + "In"] || "show";
                    animEl[fx](speed);
                });
            } else {
                el.hide();
            }
        });
    }
    function init(e, opts, slideOpts, currSlide, isAfter) {
        if (opts.captionPlugin !== "caption2") return;
        $.each([ "caption", "overlay" ], function() {
            var template = slideOpts[this + "Template"], el = opts.API.getComponent(this);
            if (el.length && template) el.html(opts.API.tmpl(template, slideOpts, opts, currSlide));
        });
    }
})(jQuery);

(function($) {
    "use strict";
    $.extend($.fn.cycle.defaults, {
        centerHorz: false,
        centerVert: false
    });
    $(document).on("cycle-pre-initialize", function(e, opts) {
        if (!opts.centerHorz && !opts.centerVert) return;
        var timeout, timeout2;
        $(window).on("resize orientationchange load", resize);
        opts.container.on("cycle-destroyed", destroy);
        opts.container.on("cycle-initialized cycle-slide-added cycle-slide-removed", function(e, opts, slideOpts, slide) {
            resize();
        });
        adjustActive();
        function resize() {
            clearTimeout(timeout);
            timeout = setTimeout(adjustActive, 50);
        }
        function destroy(e, opts) {
            clearTimeout(timeout);
            clearTimeout(timeout2);
            $(window).off("resize orientationchange", resize);
        }
        function adjustAll() {
            opts.slides.each(adjustSlide);
        }
        function adjustActive() {
            adjustSlide.apply(opts.container.find("." + opts.slideActiveClass));
            clearTimeout(timeout2);
            timeout2 = setTimeout(adjustAll, 50);
        }
        function adjustSlide() {
            var slide = $(this);
            var contW = opts.container.width();
            var contH = opts.container.height();
            var w = slide.outerWidth();
            var h = slide.outerHeight();
            if (w) {
                if (opts.centerHorz && w <= contW) slide.css("marginLeft", (contW - w) / 2);
                if (opts.centerVert && h <= contH) slide.css("marginTop", (contH - h) / 2);
            }
        }
    });
})(jQuery);

(function($) {
    "use strict";
    var supportTouch = "ontouchend" in document;
    $.event.special.swipe = $.event.special.swipe || {
        scrollSupressionThreshold: 10,
        durationThreshold: 1e3,
        horizontalDistanceThreshold: 30,
        verticalDistanceThreshold: 75,
        setup: function() {
            var $this = $(this);
            $this.bind("touchstart", function(event) {
                var data = event.originalEvent.touches ? event.originalEvent.touches[0] : event;
                var stop, start = {
                    time: new Date().getTime(),
                    coords: [ data.pageX, data.pageY ],
                    origin: $(event.target)
                };
                function moveHandler(event) {
                    if (!start) return;
                    var data = event.originalEvent.touches ? event.originalEvent.touches[0] : event;
                    stop = {
                        time: new Date().getTime(),
                        coords: [ data.pageX, data.pageY ]
                    };
                    if (Math.abs(start.coords[0] - stop.coords[0]) > $.event.special.swipe.scrollSupressionThreshold) {
                        event.preventDefault();
                    }
                }
                $this.bind("touchmove", moveHandler).one("touchend", function(event) {
                    $this.unbind("touchmove", moveHandler);
                    if (start && stop) {
                        if (stop.time - start.time < $.event.special.swipe.durationThreshold && Math.abs(start.coords[0] - stop.coords[0]) > $.event.special.swipe.horizontalDistanceThreshold && Math.abs(start.coords[1] - stop.coords[1]) < $.event.special.swipe.verticalDistanceThreshold) {
                            start.origin.trigger("swipe").trigger(start.coords[0] > stop.coords[0] ? "swipeleft" : "swiperight");
                        }
                    }
                    start = stop = undefined;
                });
            });
        }
    };
    $.event.special.swipeleft = $.event.special.swipeleft || {
        setup: function() {
            $(this).bind("swipe", $.noop);
        }
    };
    $.event.special.swiperight = $.event.special.swiperight || $.event.special.swipeleft;
})(jQuery);

(function($) {
    "use strict";
    var template = '<div class=cycle-youtube><object width="640" height="360">' + '<param name="movie" value="{{url}}"></param>' + '<param name="allowFullScreen" value="{{allowFullScreen}}"></param>' + '<param name="allowscriptaccess" value="always"></param>' + '<param name="wmode" value="opaque"></param>' + '<embed src="{{url}}" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="{{allowFullScreen}}" wmode="opaque"></embed>' + "</object></div>";
    $.extend($.fn.cycle.defaults, {
        youtubeAllowFullScreen: true,
        youtubeAutostart: false,
        youtubeAutostop: true
    });
    $(document).on("cycle-bootstrap", function(e, opts) {
        if (!opts.youtube) return;
        opts.hideNonActive = false;
        opts.container.find(opts.slides).each(function(i) {
            if ($(this).attr("href") === undefined) return;
            var markup, slide = $(this), url = slide.attr("href");
            var fs = opts.youtubeAllowFullScreen ? "true" : "false";
            url += (/\?/.test(url) ? "&" : "?") + "enablejsapi=1";
            if (opts.youtubeAutostart && opts.startingSlide === i) url += "&autoplay=1";
            markup = opts.API.tmpl(template, {
                url: url,
                allowFullScreen: fs
            });
            slide.replaceWith(markup);
        });
        opts.slides = opts.slides.replace(/(\b>?a\b)/, "div.cycle-youtube");
        if (opts.youtubeAutostart) {
            opts.container.on("cycle-initialized cycle-after", function(e, opts) {
                var index = e.type == "cycle-initialized" ? opts.currSlide : opts.nextSlide;
                $(opts.slides[index]).find("object,embed").each(play);
            });
        }
        if (opts.youtubeAutostop) {
            opts.container.on("cycle-before", function(e, opts) {
                $(opts.slides[opts.currSlide]).find("object,embed").each(pause);
            });
        }
    });
    function play() {
        try {
            this.playVideo();
        } catch (ignore) {}
    }
    function pause() {
        try {
            this.pauseVideo();
        } catch (ignore) {}
    }
})(jQuery);

(function($) {
    "use strict";
    $.extend($.fn.cycle.API, {
        tmpl: function(str, opts) {
            var regex = new RegExp(opts.tmplRegex || $.fn.cycle.defaults.tmplRegex, "g");
            var args = $.makeArray(arguments);
            args.shift();
            return str.replace(regex, function(_, str) {
                var i, j, obj, prop, names = str.split(".");
                for (i = 0; i < args.length; i++) {
                    obj = args[i];
                    if (!obj) continue;
                    if (names.length > 1) {
                        prop = obj;
                        for (j = 0; j < names.length; j++) {
                            obj = prop;
                            prop = prop[names[j]] || "";
                        }
                    } else {
                        prop = obj[str];
                    }
                    if ($.isFunction(prop)) return prop.apply(obj, args);
                    if (prop !== undefined && prop !== null && prop != str) return prop;
                }
                return str;
            });
        }
    });
    $.extend($.fn.cycle.API, {
        getComponent: function(name) {
            var opts = this.opts();
            var selector = opts[name];
            if (typeof selector === "string") {
                return /^\s*[\>|\+|~]/.test(selector) ? opts.container.parent().find(selector) : $(selector);
            }
            if (selector.jquery) return selector;
            return $(selector);
        }
    });
})(window.jQuery);

(function($) {
    "use strict";
    window.JSJGallerySlideShowUtilities = function(settings) {
        var self = {}, __self = {};
        __self.settings = settings;
        __self.tmpl = $.fn.cycle.API.tmpl;
        self.addImagePagination = function($el, $pager_el) {
            var all_images = $.map($el.find("img"), function(el) {
                if (el.className.indexOf("sentinel") === -1) {
                    return el.src;
                }
            });
            $pager_el.find(".slideshow-thumbnail").each(function(i) {
                $(this).css("background-image", "url(" + all_images[i] + ")");
            });
            return self;
        };
        self.updateNumberingString = function($el, $numbering_el, optionHash) {
            var html, $container = $el.parent();
            __self.of_string = __self.of_string || $container.data("numbering-translation-of");
            optionHash.slideNum = optionHash.slideNum || 1;
            html = __self.tmpl(__self.settings.numberingTemplate, $.extend({
                ofString: __self.of_string
            }, optionHash));
            $numbering_el.html(html);
            return self;
        };
        self.updateCaption = function($el, $caption_el, optionHash, options) {
            var current_slice_index = options && options.use_current_slide ? optionHash.currSlide || 0 : optionHash.nextSlide || 0, current_slide = optionHash.slides[current_slice_index], attachment_id = +current_slide.id.replace("attachment-image-", ""), html;
            html = __self.tmpl(__self.settings.captionTemplate, $.extend({
                ofString: __self.of_string,
                attachment: window.jsj_gallery_slideshow_images[attachment_id]
            }, optionHash));
            $caption_el.html(html);
            return self;
        };
        self.updateGalleryHeight = function($el, image_el) {
            if (image_el.height > 0) {
                $el.clearQueue().animate({
                    height: image_el.height
                }, __self.settings.speed);
            }
            return self;
        };
        self.setInitialHeight = function($el) {
            var animateElementHeight = function(height) {
                $el.clearQueue().animate({
                    height: height
                }, 200);
            }, numberOfTimesPolled = 0, pollHeight = function() {
                var el = $el.get(0), height = el.children[0].height;
                if (height && height > 1) {
                    animateElementHeight(height);
                } else if (numberOfTimesPolled < 10) {
                    setTimeout(pollHeight, numberOfTimesPolled * 50);
                }
            };
            setTimeout(pollHeight, 1);
            return self;
        };
        return self;
    };
})(window.jQuery);

(function($) {
    "use strict";
    window.createJSJGallerySlideshow = function(theme_selector, theme_settings) {
        var settings = window.jsj_gallery_slideshow_options.settings, slideshow_initialized = false, self = {}, __self = {};
        if (theme_selector !== undefined && theme_settings !== undefined) {
            __self.selector = settings.autoSelector + "." + theme_selector;
            __self.theme_instance = true;
            settings = $.extend(settings, theme_settings);
        } else {
            __self.selector = settings.autoSelector;
            __self.theme_instance = false;
        }
        __self.init = function() {
            __self.document_ready = false;
            self.settings = $.extend($.fn.cycle.defaults, settings);
            if (!__self.theme_instance) {
                $.fn.cycle.defaults = self.settings;
                $.fn.cycle.defaults.captionModule = false;
            }
            self.utilities = new window.JSJGallerySlideShowUtilities(self.settings);
            $(window).resize(__self.resizeHandler).on("orientationchange", __self.resizeHandler);
            $(document).ready(__self.documentReadyHandler);
            __self.log("Initializing createJSJGallerySlideshow");
        };
        __self.resizeHandler = function() {
            clearTimeout(__self.resizeTimeout);
            __self.resizeTimeout = setTimeout(self.init, 50);
        };
        __self.log = function(message) {
            if (self.settings.log) {
                console.log("[JSJ Gallery Slideshow] " + message);
            }
        };
        __self.documentReadyHandler = function() {
            __self.document_ready = true;
            __self.$el = self.$el = $(__self.selector);
            self.init();
        };
        self.init = function() {
            __self.log("Re-Initializing Slideshow. jQuery elements were not required. Slideshows destroyed and re-initiated");
            if (window.jsj_gallery_slideshow_options.scripts_enqueued) {
                self.get$el(true).cycle();
            } else {
                __self.log("scripts_enqueued is set in settings. Not initializing slideshows.");
            }
            return self;
        };
        self.getJQueryElement = function(force_requery) {
            if (force_requery === undefined) {
                force_requery = false;
            }
            if (!__self.document_ready || force_requery === true) {
                __self.$el = self.$el = $(__self.selector);
            }
            return __self.$el;
        };
        self.get$el = self.getJQueryElement;
        __self.init();
        return function(initalize) {
            if (initalize === undefined) {
                initalize = true;
            }
            if (initalize && __self.document_ready) {
                self.init();
            }
            return self;
        };
    }();
})(window.jQuery);